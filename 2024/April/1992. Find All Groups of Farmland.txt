function findFarmland(land):
    result = []

    function dfs(r, c):
        visited.add((r, c))
        top_left = [r, c]
        bottom_right = [r, c]

        for each direction (dr, dc) in [(1, 0), (-1, 0), (0, 1), (0, -1)]:
            nr = r + dr
            nc = c + dc
            if nr is within bounds and nc is within bounds and land[nr][nc] == 1 and (nr, nc) not in visited:
                boundaries = dfs(nr, nc)
                top_left = [min(top_left[0], boundaries[0][0]), min(top_left[1], boundaries[0][1])]
                bottom_right = [max(bottom_right[0], boundaries[1][0]), max(bottom_right[1], boundaries[1][1])]

        return [top_left, bottom_right]

    m = number of rows in land
    n = number of columns in land
    visited = set()

    for each row index i from 0 to m - 1:
        for each column index j from 0 to n - 1:
            if land[i][j] == 1 and (i, j) not in visited:
                farmland_group = dfs(i, j)
                result.append([farmland_group[0][0], farmland_group[0][1], farmland_group[1][0], farmland_group[1][1]])

    return result
