Function cherryPickup(grid):
    rows = number of rows in grid
    cols = number of columns in grid
    memo = 3D array of size (rows) x (cols) x (cols) filled with None values

    Function dp(row, col1, col2):
        if row == rows or col1 < 0 or col1 >= cols or col2 < 0 or col2 >= cols:
            return negative infinity
        if grid[row][col1] == -1 or grid[row][col2] == -1:
            return negative infinity
        if memo[row][col1][col2] is not None:
            return memo[row][col1][col2]
        if row == rows - 1:
            return grid[row][col1] + (grid[row][col2] if col1 != col2 else 0)
        
        max_cherries = negative infinity
        for each new_col1 from col1 - 1 to col1 + 1:
            for each new_col2 from col2 - 1 to col2 + 1:
                max_cherries = max(max_cherries, dp(row + 1, new_col1, new_col2))
        
        if max_cherries != negative infinity:
            max_cherries += grid[row][col1] + (grid[row][col2] if col1 != col2 else 0)
        
        memo[row][col1][col2] = max_cherries
        return max_cherries

    return max(0, dp(0, 0, cols - 1))
